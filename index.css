@font-face {
  font-family: "GmarketSansMedium";
  src: url("https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2001@1.1/GmarketSansMedium.woff")
    format("woff");
  font-weight: normal;
  font-style: normal;
}

:root {
  --bg-color: #8465dd;
  --game-color: pink;
  --card-title-color: #5f3dc4;
  --card-desc-color: #808080;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  padding: 40px 0;
  background-color: var(--bg-color);

  /* 원근감을 위해 3d 공간에서 대상과 관측점 사이의
  거리를 나타내는 perspective 속성을 적용함 */

  /* 값이 작을수록 가깝게 보이고, 값이 클수록 멀게 보인다.
  perspective 속성은 대상의 부모에게 사용하고,
  자식에게만 적용된다. (자손에는 적용X) */

  /* game-list 클래스에 원근감을 주기 위해
  game-list 클래스의 부모인 body 태그에  perspective 속성을 적용하여
  3000px 떨어진 위치에서 game-list를 바라보는 효과를 나타냄 */
  perspective: 3000px;

  /* perspective-origin 속성을 통해
  관측자가 어느 방향에서 대상을 바라보는지 설정할 수 있다. */
  perspective-origin: 50% 20%;
}

a {
  all: unset;
}

button {
  all: unset;
  cursor: pointer;
}

ul,
li {
  list-style: none;
}

/* //////////////////////////////////////////////////////// */

.title-typing-text {
  position: relative;
  font-size: 48px;
  color: white;
  margin-bottom: 40px;
}

.title-typing-text::before {
  content: "";
  width: 4px;
  height: 48px;
  background-color: white;
  position: absolute;
  top: 50%;
  right: -10px;
  transform: translateY(-45%);
  animation: blink 1s infinite;
}

.title-typing-text.stop-blinking::before {
  animation: none;
}

@keyframes blink {
  50% {
    opacity: 0;
  }
}

/* //////////////////////////////////////////////////////// */

.game-typing-text-wrapper {
  display: flex;
}

.static-text {
  font-size: 30px;
  font-weight: bold;
  color: white;
  margin-right: 15px;
}

.dynamic-typing-texts {
  height: 45px;
  line-height: 45px;
  overflow: hidden;
}

.dynamic-typing-texts li {
  position: relative;
  top: 0;
  line-height: 45px;
  font-size: 30px;
  color: var(--game-color);
  animation: slide 6s steps(3) infinite;
}

@keyframes slide {
  100% {
    top: -135px;
  }
}

.dynamic-typing-texts li::after {
  content: "";
  position: absolute;
  left: 0px;
  width: 100%;
  height: 100%;
  background: var(--bg-color);
  border-left: 3px solid var(--game-color);
  animation: typing 2s steps(4) infinite;
}

@keyframes typing {
  60%,
  70% {
    left: 100%;
  }
  100% {
    left: 0%;
  }
}

/* //////////////////////////////////////////////////////// */

.game-list {
  width: 250px;
  height: 320px;
  margin: 80px 0 100px;
  padding: 40px;
  font-family: "GmarketSansMedium";

  /* transform-style 속성은 자식 요소가
  입체적인 3d 공간에 배치될지
  평면의 2d 공간에 배치될지를 결정함 */
  transform-style: preserve-3d;

  /* 버튼 클릭시 스무스하게 회전하도록 설정
  회전 효과는 js로 구현 */
  transition: transform 0.3s;
}

.game-list li {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  padding: 20px;
  border-radius: 10px;
  background-color: white;
  box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,
    rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,
    rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;
  cursor: pointer;

  /* 카드를 겹쳐놓기 위해 position 설정 */
  position: absolute;
  top: 0;
  left: 0;

  /* 회전 시 뒷면인 카드들은 보이지 않도록 설정 */
  /* backface-visibility: hidden; */
}

.game-list li a {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.game-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
  margin-top: 20px;
}

.game-info h2 {
  color: var(--card-title-color);
}

.game-info p {
  color: var(--card-desc-color);
  text-align: center;
  white-space: no-wrap;
}

/*

카드를 둥글게 배치하는 방법

1) 각 카드는 가운데 중심점을 기준으로
원의 반지름만큼 떨어져 있어야 한다.
(translateZ를 통해 중심점으로부터 떨어진 거리 설정)

원의 둘레 = 2𝝿r = 카드들의 width 합
반지름 = 원의 둘레 ÷ 2 ÷ 𝝿(3.14)


2) 회전을 통해 카드를 둥글게 배치한다.
(rotateY를 통해 회전 각도를 설정)

회전각도 = 360도 ÷ 카드 개수
카드가 6장이므로 회전각도는 60도

첫번째 카드는 60도 회전
두번째 카드는 60*2 = 120도 회전
세번째 카드는 60*3 = 180도 회전
...
여섯번째 카드는 60*6 = 360도 회전

*/

.game-list li:nth-child(1) {
  transform: rotateY(0) translateZ(calc(250px * 6 / 2 / 3.14));
}

.game-list li:nth-child(2) {
  transform: rotateY(calc(360deg / 6 * 1))
    translateZ(calc(250px * 6 / 2 / 3.14));
}

.game-list li:nth-child(3) {
  transform: rotateY(calc(360deg / 6 * 2))
    translateZ(calc(250px * 6 / 2 / 3.14));
}

.game-list li:nth-child(4) {
  transform: rotateY(calc(360deg / 6 * 3))
    translateZ(calc(250px * 6 / 2 / 3.14));
}

.game-list li:nth-child(5) {
  transform: rotateY(calc(360deg / 6 * 4))
    translateZ(calc(250px * 6 / 2 / 3.14));
}

.game-list li:nth-child(6) {
  transform: rotateY(calc(360deg / 6 * 5))
    translateZ(calc(250px * 6 / 2 / 3.14));
}

/* //////////////////////////////////////////////////////// */
